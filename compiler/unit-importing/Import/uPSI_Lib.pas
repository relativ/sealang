unit uPSI_Lib;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Lib = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_ISoapInvokable(CL: TPSPascalCompiler);
procedure SIRegister_Lib(CL: TPSPascalCompiler);

{ run-time registration functions }

procedure Register;

implementation


uses
   Lib
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Lib]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_ISoapInvokable(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IInterface', 'ISoapInvokable') do
  with CL.AddInterface(CL.FindInterface('IInterface'),ISoapInvokable, 'ISoapInvokable') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Lib(CL: TPSPascalCompiler);
begin
  SIRegister_ISoapInvokable(CL);
end;

(* === run-time registration functions === *)
 
 
{ TPSImport_Lib }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Lib.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Lib(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Lib.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
end;
(*----------------------------------------------------------------------------*)
 
 
end.
